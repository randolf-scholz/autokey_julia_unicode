% !TeX root = ./subscript.sty
%
% ALTERNATIVE IMPLMENTATION BASED ON \futurelet without \expandafter
%
% - problems if successor is a macro
% - problems if successor is a unicode character
% - requires awkward string tests.
%
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{subscript}[2024/02/21 Combining Subscripts]
%
% Usage: \newunicodechar{ᵢ}{\subscript{i}}
% This allows to use multiple unicode subscripts in succession:
% - `xᵢⱼₖ` ⇝ `x\textsubscript{ijk}`
% - `$xᵢⱼₖ$` ⇝ `$x_{ijk}$`
%
% The package is designed to work with both pdftex and luatex.
%
% Note: Usage of the form `x\subscript{i}\subscript{j}' is not supported.
%

\RequirePackage{xstring}
\RequirePackage{iftex}

% region Package Options -------------------------------------------------------
\newif\ifsubscript@debug\subscript@debugfalse%  Debug flag
\newif\ifsubscript@testing\subscript@testingfalse%  Testing flag

\DeclareOption{debug}{\subscript@debugtrue}
\ProcessOptions\relax%
% endregion Package Options ----------------------------------------------------



%region utilities --------------------------------------------------------------
% variables used by the package
\newcommand{\subscript@start}{\relax}%  marker for the start of a subscript
\let\subscript@list=\subscript@start%  initialize the list

\newcommand{\subscript@log}[1]{%
%
% Prints the given message if the debug flag is set.
%
\ifsubscript@debug%
	\PackageInfo{subscript}{#1}%
\fi%
}

\newcommand{\subscript@getfirsttok}[2]{%
%
% stores the first token of #2 in #1
%
\def\@extract##1##2\@terminator{\let#1=##1}% chktex 21
\expandafter\@extract#2\@terminator% chktex 21
}

\newcommand{\subscript@list@append}[1]{%
%
% Appends the given token to the \subscript@list
%
\edef\subscript@list{\unexpanded\expandafter{\subscript@list#1}}%
}


% select the correct dispatch function
\ifpdftex%
	\def\subscript@dispatch{\subscript@dispatch@pdftex}%
\else%
	\def\subscript@dispatch{\subscript@dispatch@luatex}%
\fi%
%endregion utilities -----------------------------------------------------------



% region public interface ------------------------------------------------------
\newcommand{\subscript}[1]{%
%
% 1. If we are already in a subscript, \subscript appends the given tokens to the \subscript@list
%    Else, it resets the \subscriptlist
% 2. Executes \subscript@checknext which determines if the next character is also a subscript.
%    In this case, we go back to 1, else we stop the process.
%
\ifx\subscript@list\subscript@start%
	% Initialize the list with the first token
	\def\subscript@list{#1}%
\else%
	% append token to existing list
	\subscript@list@append{#1}%
\fi%
%
% Check the next token to determine whether to switch of subscript@continue
% This will peek at one or multiple tokens, but reinsert them without modification.
% Also, this will not add any content to the document or the \subscript@list.
%
% \futurelet\subscript@successor\subscript@dispatch%
%
% Expand successor first before \futurelet
%
\futurelet\subscript@successor\subscript@dispatch%
}
% endregion public interface ---------------------------------------------------

\def\subscript@UTFviii@two{\protected macro:->\UTFviii@two@octets}%
\def\subscript@UTFviii@three{\protected macro:->\UTFviii@three@octets}%
\def\subscript@UTFviii@four{\protected macro:->\UTFviii@four@octets}%

\newcommand{\subscript@dispatch@pdftex}{%
%
% There are 2 cases we consider:
% 1. The next token is a subscript, in which case we continue the process.
% 2. The next token is some unicode character, in which case:
%	2.1. We grab the necessary number of tokens if using an 8-bit engine
%	2.2. We expand the unicode character once to get the replacement tokens.
%   2.3. We compare the first token of the replacement tokens to the subscript token.
%
\subscript@log{>>> Dispatching on \meaning\subscript@successor'}%
%
\edef\subscript@meaning{\meaning\subscript@successor}%
%
\saveexpandmode\expandarg%
%
%
\IfBeginWith*{\subscript@meaning}{\subscript@UTFviii@four}{% *: ignore catcode
	\subscript@log{ >>> Detected Unicode 4 octets}%
	\def\subscript@execute{\subscript@check@unicode@four}%
}{\IfBeginWith*{\subscript@meaning}{\subscript@UTFviii@three}{% *: ignore catcode
	\subscript@log{ >>> Detected Unicode 3 octets}%
	\def\subscript@execute{\subscript@check@unicode@three}%
}{\IfBeginWith*{\subscript@meaning}{\subscript@UTFviii@two}{% *: ignore catcode
	\subscript@log{ >>> Detected Unicode 2 octets}%
	\def\subscript@execute{\subscript@check@unicode@two}%
}{% default case
	\def\subscript@execute{\subscript@check{\subscript@successor}}%
}}}%
%
\restoreexpandmode%
%
% dispatch the selected command.
%
\subscript@execute%
}%


\newcommand{\subscript@dispatch@luatex}{%
%
\subscript@log{ >>> Testing for subscript '\meaning\subscript@successor'}%
%
\ifx\subscript@successor\subscript%
	\subscript@log{ >>> Successor is another subscript!}%
\else%
	\edef\subscript@expanded{\unexpanded\expandafter{\subscript@successor}}%
	\subscript@log{ >>> Testing Expanded '\meaning\subscript@expanded'}%
\ifx\subscript@expanded\subscript%
	\subscript@log{ >>> E-Successor is another subscript!}%
\else%
	\subscript@getfirsttok{\subscript@firsttoken}{\subscript@expanded}%
	\subscript@log{ >>> Testing first token '\meaning\subscript@firsttoken'}%
\ifx\subscript@firsttoken\subscript%
	\subscript@log{ >>> 1-Successor is another subscript!}%
\else%
	\subscript@log{ >>> Successor is not a subscript!}%
\fi\fi\fi%
%
% \subscript@log{ >>> Testing for Unicode \meaning\subscript@successor}%
% %
% \edef\subscript@expanded{\unexpanded\expandafter{\subscript@successor}}%
% \subscript@log{ >>> Testing Expanded \meaning\subscript@expanded}%
% %
% \subscript@getfirsttok{\subscript@firsttoken}{\subscript@expanded}%
% \subscript@log{ >>> Testing first token \meaning\subscript@firsttoken}%
% %
% \subscript@check{\subscript@firsttoken}%
}



% region private implementation ------------------------------------------------
\newcommand{\subscript@check}[1]{%
%
\subscript@log{Testing against '\meaning#1'}%
%
\ifx#1\subscript%
	\subscript@log{ >>> Successor is another subscript!}%
\else%
	\subscript@log{ >>> Successor is not a subscript!}%
	\subscript@finalize%
\fi%
}



\newcommand{\subscript@finalize}{%
%
\subscript@log{Terminating with current list '\meaning\subscript@list'}%
%
\ifmmode%
	% \edef\subscript@actual{\sb\bgroup\subscript@list\egroup}%
	\subscript@log{ >>> Inserting '\meaning\subscript@list'}%
	\sb\bgroup\subscript@list\egroup%
\else%
	% \edef\subscript@actual{\textsubscript{\subscript@list}}%
	\subscript@log{ >>> Inserting '\meaning\subscript@list'}%
	\textsubscript{\subscript@list}%
\fi%
%
% reset the list
\let\subscript@list\subscript@start%
%
}


\newcommand{\subscript@check@unicode@four}[4]{% grabs 4 tokens
%
\subscript@log{>>> Expand Unicode Quadruplet}%
%
\unless\ifcsname u8:#1#2#3#4\endcsname%
	\PackageError{subscript}{Detected undefined unicode.}%
\fi%
%
\expandafter\let\expandafter\subscript@token\csname u8:#1#2#3#4\endcsname%
\subscript@log{Detected unicode '\meaning\subscript@token'}%
%
\subscript@getfirsttok{\subscript@firsttoken}{\subscript@token}%
\subscript@check{\subscript@firsttoken}%
%
\subscript@log{Reinserting '\meaning#1#2#3#4'}%
#1#2#3#4%
}


\newcommand{\subscript@check@unicode@three}[3]{% grabs 3 tokens
%
\subscript@log{>>> Expand Unicode Triplet}%
%
\unless\ifcsname u8:#1#2#3\endcsname%
	\PackageError{subscript}{Detected undefined unicode.}%
\fi%
%
\expandafter\let\expandafter\subscript@token\csname u8:#1#2#3\endcsname%
\subscript@log{Detected unicode '\meaning\subscript@token'}%
%
\subscript@getfirsttok{\subscript@firsttoken}{\subscript@token}%
\subscript@check{\subscript@firsttoken}%
%
\subscript@log{Reinserting '\meaning#1#2#3'}%
#1#2#3%
}


\newcommand{\subscript@check@unicode@two}[2]{% grabs 2 tokens
%
\subscript@log{>>> Expand Unicode Duplet}%
%
\unless\ifcsname u8:#1#2\endcsname%
	\PackageError{subscript}{Detected undefined unicode.}%
\fi%
%
\expandafter\let\expandafter\subscript@token\csname u8:#1#2\endcsname%
\subscript@log{Detected unicode '\meaning\subscript@token'}%
%
\subscript@getfirsttok{\subscript@firsttoken}{\subscript@token}%
\subscript@check{\subscript@firsttoken}%
%
\subscript@log{Reinserting '\meaning#1#2'}%
#1#2%
}
% endregion private implementation ---------------------------------------------

\endinput
